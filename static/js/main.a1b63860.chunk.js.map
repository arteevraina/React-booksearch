{"version":3,"sources":["Display.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Display","this","props","book","map","Book","className","key","id","href","volumeInfo","infoLink","src","undefined","imageLinks","thumbnail","alt","title","React","Component","Search","handleClick","event","preventDefault","url","state","query","axios","get","then","response","setState","books","data","items","console","log","catch","err","handleChange","target","value","bind","type","placeholder","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPA+BeA,G,uLAzBP,OACI,6BAEIC,KAAKC,MAAMC,KAAKC,KAAI,SAAAC,GAChB,OACA,yBAAKC,UAAU,MAAMC,IAAOF,EAAKG,IAC7B,yBAAKF,UAAU,qBACX,yBAAKA,UAAU,aACX,uBAAGG,KAAQJ,EAAKK,WAAWC,SAAUL,UAAU,QAAO,yBAAKM,SAAsCC,IAA/BR,EAAKK,WAAWI,WAA2BT,EAAKK,WAAWI,WAAWC,UAAY,GAC/IC,IAAM,iBAGP,yBAAKV,UAAU,WAAU,4BAAKD,EAAKK,WAAWO,mB,GAd5DC,IAAMC,Y,iBCmDbC,E,YAhDX,WAAYlB,GAAQ,IAAD,8BACf,4CAAMA,KASVmB,YAAc,SAACC,GACXA,EAAMC,iBACN,IAIIC,EAJY,iDAGN,EAAKC,MAAMC,MADV,+CAGXC,IAAMC,IAAIJ,GACLK,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACC,MAAOF,EAASG,KAAKC,QACpCC,QAAQC,IAAI,EAAKX,MAAMO,UAE1BK,OAAM,SAAAC,GACHH,QAAQC,IAAI,aAvBL,EA2BnBG,aAAe,SAACjB,GACZ,EAAKS,SAAS,CACVL,MAAOJ,EAAMkB,OAAOC,SA3BxB,EAAKhB,MAAQ,CACTO,MAAO,GACPN,MAAO,IAEX,EAAKgB,KAAO,EAAKrB,YAAYqB,KAAjB,gBACZ,EAAKA,KAAO,EAAKH,aAAaG,KAAlB,gBAPG,E,sEAiCnB,OACI,yBAAKpC,UAAU,aACX,+CACA,8BACA,yBAAKA,UAAU,cACX,2BAAOqC,KAAK,OAAOrC,UAAU,eAAesC,YAAY,mBAAmBC,SAAU5C,KAAKsC,eAC1F,6BACA,4BAAQI,KAAK,SAASrC,UAAU,kBAAkBwC,QAAS7C,KAAKoB,aAAhE,YAGJ,kBAAC,EAAD,CAASlB,KAAMF,KAAKwB,MAAMO,a,GA5CjBd,IAAMC,WCKZ4B,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCMQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.a1b63860.chunk.js","sourcesContent":["import React from \"react\"\nimport './Display.css'\n//condition removes undefined error\n\nclass Display extends React.Component {\n    render(){\n        return(\n            <div>\n            {\n                this.props.book.map(Book => {\n                    return(\n                    <div className=\"row\" key = {Book.id}>\n                        <div className=\"col-sm-6 col-md-4\">\n                            <div className=\"thumbnail\">\n                                <a href = {Book.volumeInfo.infoLink} className=\"book\"><img src = {Book.volumeInfo.imageLinks !== undefined ? Book.volumeInfo.imageLinks.thumbnail : \"\"} \n                                     alt = \"book-images\"\n                                    />\n                                </a>\n                                    <div className=\"caption\"><h3>{Book.volumeInfo.title}</h3>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    )\n                })\n            }\n            </div>\n        )\n    }\n}\n\nexport default Display ","import React from \"react\"\nimport Display from \"./Display\"\nimport axios from \"axios\"\n\n\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            books: [],\n            query: ''\n        }\n        this.bind = this.handleClick.bind(this)\n        this.bind = this.handleChange.bind(this)\n    }\n\n    handleClick = (event) => {\n        event.preventDefault()    // This prevents page on reloading on clicking submit\n        const apiPath = \"https://www.googleapis.com/books/v1/volumes?q=\"\n        const apiKey = process.env.REACT_APP_API_KEY\n        var part = \"&key=\"\n        let key = this.state.query\n        var url = apiPath + key + part + apiKey\n        axios.get(url)\n            .then(response => {\n                this.setState({books: response.data.items})\n                console.log(this.state.books)\n            })\n            .catch(err => {\n                console.log(\"Error\")\n            })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            query: event.target.value\n        })\n    }\n    render(){\n    return(\n        <div className=\"container\">\n            <h1>Book Search App</h1>\n            <form>\n            <div className=\"form-group\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search for Books\" onChange={this.handleChange}/>\n                <br/>\n                <button type=\"submit\" className=\"btn btn-success\" onClick={this.handleClick}>Search</button>\n            </div>\n            </form>\n            <Display book={this.state.books}/>\n        </div>\n    )}\n}\n\nexport default Search","import React from \"react\"\nimport Search from \"./Search\"\n\nfunction App() {\n    return(\n        <div>\n            <Search/>\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}